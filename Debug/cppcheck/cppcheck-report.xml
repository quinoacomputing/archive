<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.87"/>
    <errors>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nnode&apos; is assigned a value that is never used." verbose="Variable &apos;nnode&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/IO/ExodusIIMeshReader.C" line="317"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;data&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;data&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge.h" line="32"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;it&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;it&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_connectivity.h" line="82"/>
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_connectivity.h" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;compatibility&apos; can be reduced." verbose="The scope of the variable &apos;compatibility&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/mesh_adapter.C" line="268"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;parent_id&apos; can be reduced." verbose="The scope of the variable &apos;parent_id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/mesh_adapter.C" line="409"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/active_element_store.h" line="24"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/master_element_store.h" line="114"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;get&apos;." verbose="Non-pure function: &apos;get&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/master_element_store.h" line="160"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;get&apos;." verbose="Non-pure function: &apos;get&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/master_element_store.h" line="184"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="95"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="198"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="209"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="136"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;exists&apos;." verbose="Non-pure function: &apos;exists&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="149"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;is_center&apos;." verbose="Non-pure function: &apos;is_center&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="329"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;is_active&apos;." verbose="Non-pure function: &apos;is_active&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/refinement.h" line="55"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;id_generator_t&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;id_generator_t&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/id_generator.h" line="21"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;node_connectivity_t&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;node_connectivity_t&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_connectivity.h" line="43"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;mesh_adapter_t&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;mesh_adapter_t&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/mesh_adapter.h" line="31"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;key&apos; should be passed by const reference." verbose="Parameter &apos;key&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="99"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;key&apos; should be passed by const reference." verbose="Parameter &apos;key&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="196"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;key&apos; should be passed by const reference." verbose="Parameter &apos;key&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="207"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;key&apos; should be passed by const reference." verbose="Parameter &apos;key&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/edge_store.h" line="227"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::generate algorithm instead of a raw loop." verbose="Consider using std::generate algorithm instead of a raw loop." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/id_generator.h" line="54"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &apos;size&apos;." verbose="Non-pure function: &apos;size&apos; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_store.h" line="208"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Control/StatCtr.h" line="310"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oalias&apos; is assigned a value that is never used." verbose="Variable &apos;oalias&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Control/FileConv/CmdLine/Parser.C" line="94"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Control/RNGTest/InputDeck/Grammar.h" line="102"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;l&apos; is assigned a value that is never used." verbose="Variable &apos;l&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/NodeBC.C" line="186"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;oalias&apos; is assigned a value that is never used." verbose="Variable &apos;oalias&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Control/MeshConv/CmdLine/Parser.C" line="101"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sumY&apos; is assigned a value that is never used." verbose="Variable &apos;sumY&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/DiffEq/MixDirichletCoeffPolicy.h" line="201"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;sumY&apos; is assigned a value that is never used." verbose="Variable &apos;sumY&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/DiffEq/MixDirichletCoeffPolicy.h" line="202"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;std::bind&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;std::bind&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Base/Factory.h" line="112"/>
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Base/Factory.h" line="112"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/FaceData.C" line="62"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ncomp&apos; is assigned a value that is never used." verbose="Variable &apos;ncomp&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/FluxCorrector.C" line="75"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctau&apos; is assigned a value that is never used." verbose="Variable &apos;ctau&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/FluxCorrector.C" line="76"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ncomp&apos; is assigned a value that is never used." verbose="Variable &apos;ncomp&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/FluxCorrector.C" line="296"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ctau&apos; is assigned a value that is never used." verbose="Variable &apos;ctau&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/FluxCorrector.C" line="297"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ncoord&apos; is assigned a value that is never used." verbose="Variable &apos;ncoord&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/DG.C" line="514"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ip&apos; is assigned a value that is never used." verbose="Variable &apos;ip&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/DG.C" line="626"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;d&apos; is assigned a value that is never used." verbose="Variable &apos;d&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/DG.C" line="861"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;children_in&apos; should be passed by const reference." verbose="Parameter &apos;children_in&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/Refinement_State.h" line="55"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;nodes&apos; should be passed by const reference." verbose="Parameter &apos;nodes&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="216"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;nodes&apos; should be passed by const reference." verbose="Parameter &apos;nodes&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="248"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;nodes&apos; should be passed by const reference." verbose="Parameter &apos;nodes&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/tet_store.h" line="262"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;x_in&apos; should be passed by const reference." verbose="Parameter &apos;x_in&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_store.h" line="24"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;y_in&apos; should be passed by const reference." verbose="Parameter &apos;y_in&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_store.h" line="25"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &apos;z_in&apos; should be passed by const reference." verbose="Parameter &apos;z_in&apos; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Inciter/AMR/node_store.h" line="26"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Control/CommonGrammar.h" line="1370"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &apos;!=&apos; doesn&apos;t have two operands." verbose="Syntax Error: AST broken, binary operator &apos;!=&apos; doesn&apos;t have two operands.">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Main/RNGTestPrint.h" line="44"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nnpf&apos; is assigned a value that is never used." verbose="Variable &apos;nnpf&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="867"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nfpe&apos; is assigned a value that is never used." verbose="Variable &apos;nfpe&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="982"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nnpf&apos; is assigned a value that is never used." verbose="Variable &apos;nnpf&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="982"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nelem&apos; is assigned a value that is never used." verbose="Variable &apos;nelem&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="987"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nnpe&apos; is assigned a value that is never used." verbose="Variable &apos;nnpe&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="1172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nnpf&apos; is assigned a value that is never used." verbose="Variable &apos;nnpf&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="1172"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tag&apos; is assigned a value that is never used." verbose="Variable &apos;tag&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Mesh/DerivedData.C" line="1242"/>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &apos;db5dxi2&apos; and &apos;db5dxi3&apos;." verbose="Finding variables &apos;db5dxi2&apos; and &apos;db5dxi3&apos; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Integrate/Basis.C" line="167"/>
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Integrate/Basis.C" line="169"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &apos;!=&apos; doesn&apos;t have two operands." verbose="Syntax Error: AST broken, binary operator &apos;!=&apos; doesn&apos;t have two operands.">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Main/WalkerPrint.h" line="60"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dSV_l&apos; can be reduced." verbose="The scope of the variable &apos;dSV_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/MultiMat/DGMultiMat.h" line="216"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dSV_r&apos; can be reduced." verbose="The scope of the variable &apos;dSV_r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/MultiMat/DGMultiMat.h" line="216"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dSV_l&apos; is assigned a value that is never used." verbose="Variable &apos;dSV_l&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/MultiMat/DGMultiMat.h" line="250"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;wt&apos; is assigned a value that is never used." verbose="Variable &apos;wt&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Integrate/Boundary.C" line="134"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;wt&apos; is assigned a value that is never used." verbose="Variable &apos;wt&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Integrate/Surface.C" line="140"/>
        </error>
        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: noConstructor" verbose="Unmatched suppression: noConstructor">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Main/RNGTest.C" line="183"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;spidx&apos; is assigned a value that is never used." verbose="Variable &apos;spidx&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Transport/CGTransport.h" line="122"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ndof&apos; is assigned a value that is never used." verbose="Variable &apos;ndof&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Transport/DGTransport.h" line="136"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ndof&apos; is assigned a value that is never used." verbose="Variable &apos;ndof&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/Transport/DGTransport.h" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dSV_l&apos; can be reduced." verbose="The scope of the variable &apos;dSV_l&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/CompFlow/DGCompFlow.h" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dSV_r&apos; can be reduced." verbose="The scope of the variable &apos;dSV_r&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/CompFlow/DGCompFlow.h" line="220"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;spidx&apos; is assigned a value that is never used." verbose="Variable &apos;spidx&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/CompFlow/CGCompFlow.h" line="123"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;g&apos; is assigned a value that is never used." verbose="Variable &apos;g&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/CompFlow/CGCompFlow.h" line="207"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;dSV_l&apos; is assigned a value that is never used." verbose="Variable &apos;dSV_l&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/PDE/CompFlow/DGCompFlow.h" line="254"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;nchare&apos; is assigned a value that is never used." verbose="Variable &apos;nchare&apos; is assigned a value that is never used." cwe="563">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Walker/Distributor.C" line="84"/>
        </error>
        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: noConstructor" verbose="Unmatched suppression: noConstructor">
            <location file="/tmp/TeamCity-14/work/821a9fd6f64749d9/src/Main/Walker.C" line="162"/>
        </error>
    </errors>
</results>
